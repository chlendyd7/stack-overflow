# Generated by Django 4.2.11 on 2024-04-12 06:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='업데이트 일시')),
                ('removed_at', models.DateTimeField(blank=True, null=True, verbose_name='삭제 일시')),
                ('name', models.CharField(max_length=64, verbose_name='이름')),
            ],
            options={
                'verbose_name': '카테고리',
                'verbose_name_plural': '카테고리',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='업데이트 일시')),
                ('removed_at', models.DateTimeField(blank=True, null=True, verbose_name='삭제 일시')),
                ('name', models.CharField(max_length=100, verbose_name='상품 이름')),
                ('content', models.CharField(max_length=100, verbose_name='상품 내용')),
                ('sale_started_at', models.DateTimeField(blank=True, null=True, verbose_name='판매 시작 시각')),
                ('sale_ended_at', models.DateTimeField(blank=True, null=True, verbose_name='판매 종료 시각')),
                ('price', models.PositiveIntegerField(blank=True, null=True, verbose_name='상품 금액')),
                ('discount', models.PositiveIntegerField(blank=True, null=True, verbose_name='할인 금액')),
            ],
            options={
                'verbose_name': '상품',
                'verbose_name_plural': '상품',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, default=0, null=True, verbose_name='재고 양')),
                ('prodcut', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='service.product')),
            ],
            options={
                'verbose_name': '상품재고',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='업데이트 일시')),
                ('removed_at', models.DateTimeField(blank=True, null=True, verbose_name='삭제 일시')),
                ('image', models.ImageField(blank=True, height_field='height', null=True, upload_to='product', width_field='width')),
                ('image_link', models.URLField(blank=True, max_length=400, null=True)),
                ('width', models.PositiveIntegerField(blank=True, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=1, verbose_name='순서')),
                ('start_at', models.DateTimeField(blank=True, null=True, verbose_name='노출 시작 일시')),
                ('end_at', models.DateTimeField(blank=True, null=True, verbose_name='노출 종료 일시')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='service.product')),
            ],
            options={
                'verbose_name': ('상품 이미지',),
                'verbose_name_plural': ('상품 이미지',),
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='업데이트 일시')),
                ('removed_at', models.DateTimeField(blank=True, null=True, verbose_name='삭제 일시')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.category')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.product')),
            ],
            options={
                'verbose_name': '상품, 카테고리 관계 테이블',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ManyToManyField(through='service.ProductCategory', to='service.category'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('nickname', models.CharField(max_length=100, null=True, verbose_name='닉네임')),
                ('phone_number', models.CharField(blank=True, max_length=60, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True, verbose_name='성별')),
                ('removed_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
